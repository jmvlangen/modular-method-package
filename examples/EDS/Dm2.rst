==========================================
 Computations for the case :math:`D = -2`
==========================================

In this document we will perform the computations required to prove
the non-existence of l-th powers (with l a large prime) in some
Elliptic Divisibility Sequences generated by points on
:math:`E_{-2}(\QQ)`.

.. linkall

We require the following to run the code below. Note that the file
`frey_curves.sage` is the file in the same directory as this file. If
you try to test this file, please make sure the load path of
`frey_curves.sage` matches the path from the directory you are running
the tests from by editing the code below. Note that the file
`frey_curves.sage` also imports some components from the
`modular_method` package.

::

   sage: from modular_method.diophantine_equations.conditions import apply_to_conditional_value
   sage: load("examples/EDS/frey_curves.sage")

First of all we construct the elliptic curve :math:`E_{-2}` and
compute generators for the abelian group :math:`E_{-2}(\QQ)`. We also
precompute the prime numbers smaller than 50 that do not divide
:math:`2`, which we will use later.

::

   sage: D = -2
   sage: Em2 = EllipticCurve([0, 0, 0, D, 0])
   sage: P, = Em2.gens(); T = Em2.torsion_points()[0]
   sage: trace_primes = [p for p in prime_range(50) if not p.divides(2*D)]

To use the level lowering result from Proposition 5.3.1 we need that
the denominators of the the points considered are divisible by a prime
larger than 3. We therefore compute all the points on :math:`E_{-2}(\QQ)`
that do not satisfy this property and exclude them later from our
computations.

::

   sage: S_integral_points = [Em2(P.Coordinates().sage()) for P in magma(Em2).SIntegralPoints([2, 3])]
   sage: S_integral_points += [-P for P in S_integral_points]
   sage: compare = [
   ....:     P,
   ....:     2*P,
   ....:     T,
   ....:     P + T,
   ....:     2*P + T,
   ....:     3*P + T,
   ....: ]
   sage: compare += [-P for P in compare]
   sage: assert set(S_integral_points) == set(compare)

The case a = 1
--------------

First of all we look at the Frey curve :math:`E_{1, z, w}` which
corresponds to points `m*P` with `m` even.

::

   sage: a = 1
   sage: E1zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

We compute the conductor exponent of this Frey curve at 2.

::

   sage: e2 = apply_to_conditional_value(lambda E: E.conductor_exponent(2, verbose=True), E1zw)

We know that `B` is at least a square, hence we can apply some
additional conditions.

::

   sage: z, w = E1zw[0][0].parameters()
   sage: con_extra = (CongruenceCondition(w^2 - a*z^4, 2^9) |
   ....:              ~CongruenceCondition(w^2 - a*z^4, 2^2))
   sage: e2 = ConditionalValue([
   ....:     (e, con) for e, con in e2
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ]); e2
   1 if ('z', 'w') is 1 of 256 possibilities mod 256

We check that the remaining condition corresponds to the one in Table
5.1.

::

   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2^9) == 0
   ....:     for zz, ww in e2[0][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )

We can now compute the newform candidates to eliminate. Note that the
default method does not take into account our additional condition, so
we filter afterwards.

::

   sage: Enfs1 = apply_to_conditional_value(
   ....:     lambda E: apply_to_conditional_value(
   ....:         lambda nfs: (E, nfs),
   ....:         E.newform_candidates(
   ....:             bad_primes=(2*D).prime_factors(),
   ....:             algorithm='magma',
   ....:         ),
   ....:     ),
   ....:     E1zw,
   ....: )
   sage: Enfs1 = ConditionalValue([
   ....:     (Enfs, con) for Enfs, con in Enfs1
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ])

Note that there are no newforms, hence there are no l-th powers among
the denominators of the points corresponding to :math:`E_{1, z, w}`
for :math:`l > 2`.

::

   sage: apply_to_conditional_value(lambda Enfs: len(Enfs[1]), Enfs1)
   0

The case a = -1
---------------

Now we look at the Frey curve :math:`E_{-1, z, w}` which corresponds to
points `m*P` with `m` odd.

::

   sage: a = -1
   sage: Em1zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

Since this is a Frey Q-curve we need to compute a twist for which the
restriction of scalars decomposes. We do so and check that in that
case the definition field and decomposition field are the same.

::

   sage: Em1zwg = Em1zw.decomposable_twist()
   sage: K = Em1zwg.definition_field()
   sage: assert K == Em1zwg.decomposition_field()

We ask the framework to compute the associated newforms for us and
compute how many there are for each of the possible cases.

::

   sage: nfsm1 = Em1zwg.newform_candidates(bad_primes=K.primes_above(2*D), algorithm='magma')
   sage: apply_to_conditional_value(len, nfsm1)
   16

Now we eliminate the newforms by comparing traces of Frobenius at all
the primes in `trace_primes`.

::

   sage: z, w = Em1zwg.parameters()
   sage: z, w = z.change_ring(QQ), w.change_ring(QQ)
   sage: nfsm1 = eliminate_by_traces(
   ....:     Em1zwg,
   ....:     nfsm1,
   ....:     condition=CoprimeCondition([z, w]),
   ....:     primes=trace_primes,
   ....:     verbose=True,
   ....: )

Next we list how many newforms can not be eliminated in every
cases. For the newforms that were eliminated we list the primes for
which they were not yet eliminated.

::

   sage: apply_to_conditional_value(
   ....:     lambda nfs: sum(1 for nf in nfs if nf[-1] == 0),
   ....:     nfsm1,
   ....: )
   4
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs if nf[-1] != 0).prime_factors(),
   ....:     nfsm1,
   ....: )
   [2, 3, 7]

Now we limit ourself to all points which are multiples of `3*P`.
For all of them `B` is divisible by the prime numbers dividing the
denominator of `2*P`, which in this case is only 13.

::

   sage: P1 = 3*P; P1.xy()
   (-1/169, 239/2197)
   sage: P1.xy()[0].denominator().prime_factors()
   [13]

We perform the elimination again at 11, using this additional
condition. We find that all newforms are eliminated in this case
whenever :math:`l > 13`.

::

   sage: nfsm1P = eliminate_by_trace(
   ....:     Em1zwg,
   ....:     nfsm1,
   ....:     13,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 13)),
   ....:     verbose=True,
   ....: )
   sage: assert apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfsm1P
   ....: )
   [2, 5, 7, 13]

Note that if `B` were to be an l-th power with :math:`l > 2`, then
:math:`13^3` should divide `B`. This implies that the corresponding
point should be a multiple of `13*3*P`. We can thus restrict further
by also ensuring that the primes in the denominator of `13*3*P` divide
`B`.

::

   sage: [
   ....:     p for p in prime_range(100)
   ....:     if p.divides((13*P1).xy()[0].denominator())
   ....: ]
   [13, 37, 41]

Comparing traces of Frobenius again at 37 and 41 gives us that all
newforms are eliminated when :math:`l > 2`.

::

   sage: nfsm1P = eliminate_by_trace(
   ....:     Em1zwg,
   ....:     nfsm1P,
   ....:     37,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 37)),
   ....:     verbose=True,
   ....: )
   sage: nfsm1P = eliminate_by_trace(
   ....:     Em1zwg,
   ....:     nfsm1P,
   ....:     41,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 41)),
   ....:     verbose=True,
   ....: )
   sage: assert apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfsm1P
   ....: )
   [2]

The case a = 2
--------------

Now we look at the Frey curve :math:`E_{2, z, w}` which corresponds to
points `m*P + T` with `m` odd.
::

   sage: a = 2
   sage: E2zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

Since this is a Frey Q-curve we need to compute a twist for which the
restriction of scalars decomposes. We do so and check that in that
case the definition field and decomposition field are the same.

::

   sage: E2zwg = E2zw.decomposable_twist()
   sage: K = E2zwg.definition_field()
   sage: assert K == E2zwg.decomposition_field()

We ask the framework to compute the associated newforms for us and
compute how many there are for each of the possible cases.

::

   sage: nfs2 = E2zwg.newform_candidates(bad_primes=K.primes_above(2*D), algorithm='magma')
   sage: apply_to_conditional_value(len, nfs2)
   28

Now we eliminate the newforms by comparing traces of Frobenius at all
the primes in `trace_primes`.

::

   sage: z, w = E2zwg.parameters()
   sage: z, w = z.change_ring(QQ), w.change_ring(QQ)
   sage: nfs2 = eliminate_by_traces(
   ....:     E2zwg,
   ....:     nfs2,
   ....:     condition=CoprimeCondition([z, w]),
   ....:     primes=trace_primes,
   ....:     verbose=True,
   ....: )

Next we list how many newforms can not be eliminated in every
cases. For the newforms that were eliminated we list the prime
exponents `l` for which they were not yet eliminated.

::

   sage: apply_to_conditional_value(
   ....:     lambda nfs: sum(1 for nf in nfs if nf[-1] == 0),
   ....:     nfs2,
   ....: )
   12
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs if nf[-1] != 0).prime_factors(),
   ....:     nfs2,
   sage: )
   [2]

Now we limit ourself to all points which are multiples of `5*P + T`.
For all of them `B` is divisible by the prime numbers dividing the
denominator of `5*P + T`, which in this case are 17 and 79.

::

   sage: P1 = 5*P + T; P1.xy()
   (4651250/1803649, -8388283850/2422300607)
   sage: P1.xy()[0].denominator().prime_factors()
   [17, 79]

We perform the elimination again at 17 and 79, using this additional
condition. We find that all newforms are eliminated in this case
whenever :math:`l \neq 2, 5, 79`.

::

   sage: nfs2P = eliminate_by_trace(
   ....:     E2zwg,
   ....:     nfs2,
   ....:     17,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 17)),
   ....:     verbose=True,
   ....: )
   sage: nfs2P = eliminate_by_trace(
   ....:     E2zwg,
   ....:     nfs2,
   ....:     79,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 79)),
   ....:     verbose=True,
   ....: )
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfs2P
   ....: )
   [2, 5, 79]

The case a = -2
---------------

Now we look at the Frey curve :math:`E_{-2, z, w}` which corresponds to
points `m*P + T` with `m` even.

::

   sage: a = -2
   sage: Em2zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

Since this is a Frey Q-curve we need to compute a twist for which the
restriction of scalars decomposes. We do so and check that in that
case the definition field and decomposition field are the same.

::

   sage: Em2zwg = Em2zw.decomposable_twist()
   sage: K = Em2zwg.definition_field()
   sage: assert K == Em2zwg.decomposition_field()

We ask the framework to compute the associated newforms for us and
compute how many there are for each of the possible cases.

::

   sage: nfsm2 = Em2zwg.newform_candidates(bad_primes=K.primes_above(2*D), algorithm='magma')
   sage: assert apply_to_conditional_value(len, nfsm2)
   28

Now we eliminate the newforms by comparing traces of Frobenius at all
the primes in `trace_primes`.

::

   sage: z, w = Em2zwg.parameters()
   sage: z, w = z.change_ring(QQ), w.change_ring(QQ)
   sage: nfsm2 = eliminate_by_traces(
   ....:     Em2zwg,
   ....:     nfsm2,
   ....:     condition=CoprimeCondition([z, w]),
   ....:     primes=trace_primes,
   ....:     verbose=True,
   ....: )

Next we list how many newforms can not be eliminated in every
cases. For the newforms that were eliminated we list the prime
exponents `l` for which they were not yet eliminated.

::

   sage: apply_to_conditional_value(
   ....:     lambda nfs: sum(1 for nf in nfs if nf[-1] == 0),
   ....:     nfsm2,
   ....: )
   4
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs if nf[-1] != 0).prime_factors(),
   ....:     nfsm2,
   ....: )
   [2, 3, 7]

Now we limit ourself to all points which are multiples of `2*P + T`.
For all of them `B` is divisible by the prime numbers dividing the
denominator of `2*P + T`, which in this case is only 3.

::

   sage: P1 = 2*P + T; P1.xy()
   (-8/9, -28/27)
   sage: P1.xy()[0].denominator().prime_factors()
   [3]

We perform the elimination again at 3, using this additional
condition. We find that all newforms are eliminated in this case
whenever :math:`l > 7`.

::

   sage: nfsm2P = eliminate_by_trace(
   ....:     Em2zwg,
   ....:     nfsm2,
   ....:     3,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 3)),
   ....:     verbose=True,
   ....: )
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfsm2P
   sage: )
   [2, 3, 7]

Note that if `B` were to be an l-th power with :math:`l > 2`, then
:math:`3^3` should divide `B`. This implies that the corresponding
point should be a multiple of `3*(3*P + T)`. We can thus restrict
further by also ensuring that the primes in the denominator of
`13*(3*P + T)` divide `B`. For computation time reasons we limit
ourselves to the primes below 100 dividing `B`.

::

   sage: [
   ....:     p for p in prime_range(100)
   ....:     if p.divides((3*P1).xy()[0].denominator())
   ....: ]
   [3, 11]

Comparing traces of Frobenius again at 11 gives us that all newforms
are eliminated when :math:`l > 3`.

::

   sage: nfsm2P = eliminate_by_trace(
   ....:     Em2zwg,
   ....:     nfsm2P,
   ....:     11,
   ....:     condition=(CoprimeCondition([z, w]) &
   ....:                CongruenceCondition(w^2 - a*z^4, 11)),
   ....:     verbose=True,
   ....: )
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfsm2P
   ....: )
   [2, 3]
