===========================================
 Computations for the case :math:`D = 125`
===========================================

In this document we will perform the computations required to prove
the non-existence of l-th powers (with l a large prime) in some
Elliptic Divisibility Sequences generated by points on
:math:`E_{125}(\QQ)`. This includes all the computation of Section
5.5.1.

.. linkall

We require the following to run the code below. Note that the file
`frey_curves.sage` is the file in the same directory as this file. If
you try to test this file, please make sure the load path of
`frey_curves.sage` matches the path from the directory you are running
the tests from by editing the code below. Note that the file
`frey_curves.sage` also imports some components from the
`modular_method` package.

::

   sage: from modular_method.diophantine_equations.conditions import apply_to_conditional_value
   sage: from modular_method.number_fields.galois_group import cyclotomic_galois_isomorphism
   sage: load("examples/EDS/frey_curves.sage")

First of all we construct the elliptic curve :math:`E_{125}` and
compute generators for the abelian group :math:`E_{125}(\QQ)`.

::

   sage: D = 125
   sage: E125 = EllipticCurve([0, 0, 0, D, 0])
   sage: P, = E125.gens(); T = E125.torsion_points()[0]

To use the level lowering result from Proposition 5.3.1 we need that
the denominators of the the points considered are divisible by a prime
larger than 3. We therefore compute all the points on
:math:`E_{125}(\QQ)` that do not satisfy this property and exclude
them later from our computations.

::

   sage: S_integral_points = [E125(P.Coordinates().sage()) for P in magma(E125).SIntegralPoints([2, 3])]
   sage: S_integral_points += [-P for P in S_integral_points]
   sage: compare = [
   ....:     P,
   ....:     T,
   sage: ]
   sage: compare += [-P for P in compare]
   sage: assert set(S_integral_points) == set(compare)

The case a = 1
--------------

First of all we look at the Frey curve :math:`E_{1, z, w}` which
corresponds to points `m*P` with `m` an integer.

::

   sage: a = 1
   sage: E1zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

We compute the conductor exponent of this Frey curve at 2.

::

   sage: e2 = apply_to_conditional_value(lambda E: E.conductor_exponent(2, verbose=True), E1zw)

We know that `B` is at least a square, hence we can apply some
additional conditions.

::

   sage: z, w = E1zw[0][0].parameters()
   sage: con_extra = CongruenceCondition(w^2 - a*z^4, 2^8)
   sage: e2 = ConditionalValue([
   ....:     (e, con) for e, con in e2
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ]); e2
   0 if ('z', 'w') is 1 of 256 possibilities mod 256
   1 if ('z', 'w') is 1 of 256 possibilities mod 256

We check that the remaining conditions correspond to the ones in Table
5.1.

::

   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2^9) == 2^8
   ....:     for zz, ww in e2[0][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )
   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2^9) == 0
   ....:     for zz, ww in e2[1][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )

Finally we assert that the conductor exponent at 5 is always 1.

::

   sage: apply_to_conditional_value(lambda E: E.conductor_exponent(5), E1zw)
   1

We can now compute the newform candidates to eliminate. Note that the
default method does not take into account our additional condition, so
we filter afterwards. We check that after this no newforms remain,
implying that there are no l-th powers among the denominators of the
points `m*P` with `m` an integer for :math:`l > 2` prime.

::

   sage: nfs1 = apply_to_conditional_value(
   ....:     lambda E: E.newform_candidates(bad_primes=[2,5], verbose=2),
   ....:     E1zw,
   ....: )
   sage: nfs1 = ConditionalValue([
   ....:     (nfs, con) for nfs, con in nfs1
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ]); nfs1
   [] if ('z', 'w') is 1 of 128 possibilities mod 128

The case a = 125
----------------

Now we look at the Frey curve :math:`E_{125, z, w}` which corresponds to
points `m*P + T` with `m` an integer.

::

   sage: a = 125
   sage: E125zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

We check that `E125zw` is completely defined over :math:`\QQ(\sqrt{2},
\sqrt{5})`, and that a character of conductor 20 and order 4 is a
splitting character.

::

   sage: E125zw.complete_definition_field().is_isomorphic(QQ[sqrt(2), sqrt(5)])
   sage: eps = E125zw.splitting_character(); eps
   Dirichlet character modulo 20 of conductor 20 mapping 11 |--> -1, 17 |--> zeta4
   sage: eps.order()
   4

We affirm that a field over which `E125zw` is completely defined and
the splitting map is defined is the field :math:`\QQ(\zeta_40 +
\zeta_40^{-1})`.

::

   sage: K = E125zw.decomposition_field()
   sage: L.<zeta40> = CyclotomicField(40)
   sage: assert K.is_isomorphic(L.subfield(zeta40 + zeta40^(-1))[0])

We compute tables for the 2-cocycles corresponding to `E125zw` and the
splitting map. Note that we use representatives from :math:`(\ZZ /
40\ZZ)^*` (`Gval`) to obtain the elements of the Galois group in the
order as represented in Section 5.5.1.

::

   sage: Gval = [n for n in range(20) if gcd(n, 40) == 1]
   sage: G = [cyclotomic_galois_isomorphism(n, N=40) for n in Gval]
   sage: matrix([[E125zw.c(s, t) for t in G] for s in G])
   [ 1  1  1  1  1  1  1  1]
   [ 1 -2 -2  1  1 -2 -2  1]
   [ 1  2  2  1  1  2  2  1]
   [ 1  1  1  1  1  1  1  1]
   [ 1 -1 -1  1  1 -1 -1  1]
   [ 1 -2 -2  1  1 -2 -2  1]
   [ 1  2  2  1  1  2  2  1]
   [ 1 -1 -1  1  1 -1 -1  1]
   sage: matrix([[E125zw.c_splitting_map(s, t) for t in G] for s in G])
   Warning: The restriction of scalars of this Q-curve over the decomposition field does not decompose into abelian varieties of GL_2-type. Use the method decomposable_twist to find a twist that does.
   [ 1  1  1  1  1  1  1  1]
   [ 1 -2  2  1  1  2 -2  1]
   [ 1  2  2 -1 -1  2  2  1]
   [ 1  1 -1 -1 -1 -1  1  1]
   [ 1  1 -1 -1 -1 -1  1  1]
   [ 1  2  2 -1 -1  2  2  1]
   [ 1 -2  2  1  1  2 -2  1]
   [ 1  1  1  1  1  1  1  1]

We check that the map :math:`\alpha` given in Section 5.5.1 indeed has
the claimed coboundary.

::

   sage: alpha_val = {
   ....:     1: 1,
   ....:     -1: 1,
   ....:     19: 1,
   ....:     -19: 1,
   ....:     3: zeta40^17 + zeta40^(-17),
   ....:     -3: zeta40^17 + zeta40^(-17),
   ....:     17: zeta40^17 + zeta40^(-17),
   ....:     -17: zeta40^17 + zeta40^(-17),
   ....:     7: (zeta40 + zeta40^(-1))^(-1),
   ....:     -7: (zeta40 + zeta40^(-1))^(-1),
   ....:     13: (zeta40 + zeta40^(-1))^(-1),
   ....:     -13: (zeta40 + zeta40^(-1))^(-1),
   ....:     9: (zeta40^3 + zeta40^(-3))*(zeta40^9 + zeta40^(-9)),
   ....:     -9: (zeta40^3 + zeta40^(-3))*(zeta40^9 + zeta40^(-9)),
   ....:     11: (zeta40^3 + zeta40^(-3))*(zeta40^9 + zeta40^(-9)),
   ....:     -11: (zeta40^3 + zeta40^(-3))*(zeta40^9 + zeta40^(-9)),
   sage: }
   sage: alpha = {cyclotomic_galois_isomorphism(key, N=40): value for key, value in alpha_val.items()}
   sage: assert all(alpha[s] * s(alpha[t]) * alpha[s*t]^(-1) == E125zw.c(s, t) / E125zw.c_splitting_map(s, t)
   ....:            for t in L.galois_group() for s in L.galois_group())

Next we confirm that the element :math:`\gamma` given in Section 5.5.1
indeed has coboundary :math:`\alpha^2`.

::

   sage: gamma = product(zeta40^k + zeta40^(-k) for k in [1, 2, 3])
   sage: assert all(s(gamma) == alpha[s]^2 * gamma for s in L.galois_group())

Finally we confirm that twisting `E125zw` by :math:`\gamma` gives a
Q-curve for which the restriction of scalars does decompose over the
field :math:`K_0 = \QQ(\zeta_40^2 + \zeta_40^{-2})`. We also check
that :math:`K_0` is both the definition and decomposition field of the
twisted curve.

::

   sage: E125zwg = E125zw.twist(gamma)
   sage: assert E125zwg.does_decompose()
   sage: K0 = E125zwg.definition_field()
   sage: assert K0.is_isomorphic(L.subfield(zeta40^2 + zeta40^(-2))[0])
   sage: assert K0 == E125zwg.decomposition_field()

Now we compute the conductor of the twisted curve `E125zwg`. We add
for this the additional condition that :math:`w` is not divisible by
5, which can easily be verified from equation (5.5).

::

   sage: z, w = E125zwg.parameters()
   sage: z, w = z.change_ring(QQ), w.change_ring(QQ)
   sage: E125zwg._condition = E125zwg._condition & ~CongruenceCondition(w, 5)
   sage: N125g = E125zwg.conductor(additive_primes=K0.primes_above(2*5)); N125g
   (64)*Rad_P( ((2141250000000*zeta400^3 - 5032500000000*zeta400^2 - 31000000000000*zeta400 + 72875000000000)) * (z^2 + (1/50*zeta400^2 - 1/5)*w) * (z^2 + (-1/50*zeta400^2 + 1/5)*w)^2 )

We verify the restriction of scalars of `E125zwg` over :math:`K_0` is
isogenous to the product of two 2-dimensional Q-simple abelian
varieties of Gl_2-type, by checking that the image fields of the
splitting maps -- one for each conjugacy class of splitting maps --
are of degree 2.

::

   sage: E125zwg.splitting_image_field('conjugacy')
   (Number Field in zeta80 with defining polynomial x^2 + 2*x + 2 with zeta80 = -1 - 1*I,
    Number Field in zeta80 with defining polynomial x^2 + 2*x + 2 with zeta80 = -1 - 1*I)

Next we compute the possible levels and characters of newforms
associated with these Q-simple abelian varieties after level lowering.

::

   sage: E125zwg.newform_levels(bad_primes=K0.primes_above(2*5))
   [(1280, 6400), (6400, 1280)]
   sage: E125zwg.splitting_character('conjugacy')
   (Dirichlet character modulo 20 of conductor 20 mapping 11 |--> -1, 17 |--> zeta4,
    Dirichlet character modulo 20 of conductor 20 mapping 11 |--> -1, 17 |--> zeta4)

We now compute all the newforms of these levels and check we indeed
have 144 of them.

::

   sage: nfs125 = E125zwg.newform_candidates(bad_primes=K0.primes_above(2*5), algorithm='magma')
   sage: len(nfs125)
   144

We try eliminating the newforms by comparing traces of Frobenius at
all primes :math:`p < 50` with :math:`p \neq 2,5`. We check that after
that we indeed have 24 newforms that could not be eliminated and the
others can be eliminated for prime exponents :math:`l > 17`. We also
check that the 24 remaining newforms each have coefficient field
:math:`\QQ(\sqrt{-1})`.

::

   sage: primes = [p for p in prime_range(50) if p != 2 and p != 5]
   sage: nfs125 = eliminate_by_traces(E125zwg, nfs125, condition=CoprimeCondition([z, w]),
   ....:                              primes=primes, verbose=True)
   sage: assert sum(1 for nf in nfs125 if nf[-1] == 0) == 24
   sage: assert lcm(nf[-1] for nf in nfs125 if nf[-1] != 0).prime_factors() == [2, 3, 5, 13, 17]
   sage: assert all(nf[0].coefficient_field().is_isomorphic(QuadraticField(-1))
   ....:            for nf in nfs125 if nf[-1] == 0)

Now we limit ourself to all points which are multiples of `P + T`.
For all of them `B` is divisible by the prime numbers dividing the
denominator of `P + T`, which in this case is only 11.

::

   sage: P1 = P + T
   sage: P1.xy()[0].denominator().prime_factors()
   [11]

We perform the elimination again at 11, using this additional
condition. We find that all newforms are eliminated in this case
whenever :math:`l > 3` and :math:`l \neq 11`.

::

   sage: nfs125P = eliminate_by_trace(E125zwg, nfs125, 11,
   ....:                              condition=(CoprimeCondition([z, w]) &
   ....:                                         CongruenceCondition(w^2 - a*z^4, 11)),
   ....:                              verbose=True)
   sage: lcm(nf[-1] for nf in nfs125P).prime_factors()
   [2, 3, 11]
