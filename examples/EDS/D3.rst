=========================================
 Computations for the case :math:`D = 3`
=========================================

In this document we will perform the computations required to prove
the non-existence of l-th powers (with l a large prime) in some
Elliptic Divisibility Sequences generated by points on
:math:`E_3(\QQ)`.

.. linkall

We require the following to run the code below. Note that the file
`frey_curves.sage` is the file in the same directory as this file. If
you try to test this file, please make sure the load path of
`frey_curves.sage` matches the path from the directory you are running
the tests from by editing the code below. Note that the file
`frey_curves.sage` also imports some components from the
`modular_method` package.

::

   sage: from modular_method.diophantine_equations.conditions import apply_to_conditional_value
   sage: load('frey_curves.sage')

First of all we construct the elliptic curve :math:`E_3` and compute
generators for the abelian group :math:`E_3(\QQ)`. We also precompute
the prime numbers smaller than 50 that do not divide :math:`2 \cdot
3`, which we will use later.

::

   sage: D = 3
   sage: E3 = EllipticCurve([0, 0, 0, D, 0])
   sage: P, = E3.gens(); T = E3.torsion_points()[0]
   sage: trace_primes = [p for p in prime_range(50) if not p.divides(2*D)]

To use the level lowering result from Proposition 5.3.1 we need that
the denominators of the the points considered are divisible by a prime
larger than 3. We therefore compute all the points on :math:`E_3(\QQ)`
that do not satisfy this property and exclude them later from our
computations.

::

   sage: S_integral_points = [E3(P.Coordinates().sage()) for P in magma(E3).SIntegralPoints([2, 3])]
   sage: S_integral_points += [-P for P in S_integral_points]
   sage: compare = [
   ....:     P,
   ....:     2*P,
   ....:     3*P,
   ....:     T,
   ....:     P + T,
   ....:     2*P + T,
   ....: ]
   sage: compare += [-P for P in compare]
   sage: assert set(S_integral_points) == set(compare)

The case a = 1
--------------

First of all we look at the Frey curve :math:`E_{1, z, w}` which
corresponds to points `m*P` with `m` an integer.

::

   sage: a = 1
   sage: E1zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

We compute the conductor exponent of this Frey curve at 2.

::

   sage: e2 = apply_to_conditional_value(lambda E: E.conductor_exponent(2, verbose=True), E1zw)

We know that `B` is at least a square, hence we can apply some
additional conditions.

::

   sage: z, w = E1zw[0][0].parameters()
   sage: con_extra = (CongruenceCondition(w^2 - a*z^4, 2^8) |
   ....:              ~CongruenceCondition(w^2 - a*z^4, 2))
   sage: e2 = ConditionalValue([
   ....:     (e, con) for e, con in e2
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ]); e2
   8 if ('z', 'w') == (1, 2), (3, 2) mod 4
   0 if ('z', 'w') is 1 of 256 possibilities mod 256
   1 if ('z', 'w') is 1 of 256 possibilities mod 256

We check that the remaining conditions correspond to those in Table
5.1.

::

   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2) == 1
   ....:     for zz, ww in e2[0][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )
   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2^9) == 2^8
   ....:     for zz, ww in e2[1][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )
   sage: assert all(
   ....:     mod(ww^2 - a*zz^4, 2^9) == 0
   ....:     for zz, ww in e2[2][1].pAdic_tree().give_as_congruence_condition()[0]
   ....: )

Finally we assert that the conductor exponent at 3 is always 1.

::

   sage: apply_to_conditional_value(lambda E: E.conductor_exponent(3), E1zw)
   1

We can now compute the newform candidates to eliminate. Note that the
default method does not take into account our additional condition, so
we filter afterwards.

::

   sage: Enfs1 = apply_to_conditional_value(
   ....:     lambda E: apply_to_conditional_value(
   ....:         lambda nfs: (E, nfs),
   ....:         E.newform_candidates(
   ....:             bad_primes=[2,3],
   ....:             algorithm='magma',
   ....:         ),
   ....:     ),
   ....:     E1zw,
   ....: )
   sage: Enfs1 = ConditionalValue([
   ....:     (Enfs, con) for Enfs, con in Enfs1
   ....:     if not (con & con_extra).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ])

We now see that we only have newforms in case :math:`w \equiv 2` modulo 4.

::

   sage: apply_to_conditional_value(lambda Enfs: len(Enfs[1]), Enfs1)
   12 if ('z', 'w') == (1, 2), (3, 2) mod 4
   0  if ('z', 'w') is 1 of 640 possibilities mod 128

Now we perform elimination by comparing traces of Frobenius at the
primes in `trace_primes` computed before. We see that 8 newforms
remain and that the other newforms are eliminated for all prime
exponents `l` not equal to 2, 3, or 7.

::

   sage: Enfs1 = apply_to_conditional_value(
   ....:     lambda Enfs: (Enfs[0], eliminate_by_traces(
   ....:         Enfs[0],
   ....:         Enfs[1],
   ....:         primes=trace_primes,
   ....:         condition=CoprimeCondition([z, w]),
   ....:         verbose=True,
   ....:     )),
   ....:     Enfs1,
   ....: )
   sage: apply_to_conditional_value(
   ....:     lambda Enfs: sum(1 for nf in Enfs[1] if nf[-1] == 0),
   ....:     Enfs1,
   ....: )
   8 if ('z', 'w') == (1, 2), (3, 2) mod 4
   0 if ('z', 'w') is 1 of 640 possibilities mod 128
   sage: apply_to_conditional_value(
   ....:     lambda Enfs: lcm(nf[-1] for nf in Enfs[1] if nf[-1] != 0).prime_factors(),
   ....:     Enfs1,
   ....: )
   [2, 3, 7] if ('z', 'w') == (1, 2), (3, 2) mod 4
   []        if ('z', 'w') is 1 of 640 possibilities mod 128

Now we limit ourself to all points which are multiples of `2*P`. For
all of them `B` is divisible by the prime numbers dividing the
denominator of `2*P`, which in this case is only 2.

::

   sage: P1 = 2*P; P1.xy()
   (1/4, -7/8)
   sage: P1.xy()[0].denominator().prime_factors()
   [2]

Filtering the newforms with this additional condition shows that no
newforms remain, hence proves there are no l-th powers in this
particular elliptic divisibility sequence for :math:`l > 2`.

::

   sage: Enfs1P = ConditionalValue([
   ....:     (Enfs, con) for Enfs, con in Enfs1
   ....:     if not (con & CongruenceCondition(w^2 - a*z^4, 2)).pAdic_tree(pAdics=pAdicBase(QQ, 2)).is_empty()
   ....: ])
   sage: apply_to_conditional_value(lambda Enfs: len(Enfs[1]), Enfs1P)
   0

The case a = 3
--------------

Now we look at the Frey curve :math:`E_{3, z, w}` which corresponds to
points `m*P + T` with `m` an integer

::

   sage: a = 3
   sage: E3zw = Frey_curve_of_divisibility_sequence(a, D, precision=1)

Since this is a Frey Q-curve we need to compute a twist for which the
restriction of scalars decomposes. We do so and check that in that
case the definition field and decomposition field are the same.

::

   sage: E3zwg = E3zw.decomposable_twist()
   sage: K = E3zwg.definition_field()
   sage: assert K == E3zwg.decomposition_field()

We ask the framework to compute the associated newforms for us and
compute how many there are for each of the possible cases.

::

   sage: nfs3 = E3zwg.newform_candidates(bad_primes=K.primes_above(2*D), algorithm='magma')
   sage: apply_to_conditional_value(len, nfs3)
   32 if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') is 1 of 6 possibilities mod 3
   28 if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') == (1, 0), (2, 0) mod 3
   4  if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3
   0  if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3

Now we eliminate the newforms by comparing traces of Frobenius at all
the primes in `trace_primes`.

::

   sage: z, w = E3zwg.parameters()
   sage: z, w = z.change_ring(QQ), w.change_ring(QQ)
   sage: nfs3 = eliminate_by_traces(
   ....:     E3zwg,
   ....:     nfs3,
   ....:     condition=CoprimeCondition([z, w]),
   ....:     primes=trace_primes,
   ....:     verbose=True,
   ....: )

Next we list how many newforms can not be eliminated in every
cases. For the newforms that were eliminated we list the prime
exponents `l` for which they were not yet eliminated.

::

   sage: apply_to_conditional_value(
   ....:     lambda nfs: sum(1 for nf in nfs if nf[-1] == 0),
   ....:     nfs3,
   ....: )
   16 if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') is 1 of 6 possibilities mod 3
   12 if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') == (1, 0), (2, 0) mod 3
   4  if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3
   0  if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs if nf[-1] != 0).prime_factors(),
   ....:     nfs3,
   ....: )
   [2]               if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') is 1 of 6 possibilities mod 3
   [2, 3, 7, 11, 17] if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') == (1, 0), (2, 0) mod 3
   []                if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3
   [2, 3, 5]         if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3

Now we limit ourself to all points which are multiples of `3*P + T`.
For all of them `B` is divisible by the prime numbers dividing the
denominator of `3*P + T`, which in this case is only 11.

::

   sage: P1 = 3*P + T; P1.xy()
   (27/121, 1098/1331)
   sage: P1.xy()[0].denominator().prime_factors()
   [11]

We perform the elimination again at 11, using this additional
condition. We find that all newforms are eliminated in this case
whenever :math:`l > 17`.

::

   sage: nfs3P = eliminate_by_trace(E3zwg, nfs3, 11,
   ....:                              condition=(CoprimeCondition([z, w]) &
   ....:                                         CongruenceCondition(w^2 - a*z^4, 11)),
   ....:                              verbose=True)
   sage: apply_to_conditional_value(
   ....:     lambda nfs: lcm(nf[-1] for nf in nfs).prime_factors(),
   ....:     nfs3P
   ....: )
   [2, 3, 11]           if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3 or ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') is 1 of 6 possibilities mod 3
   [2, 3, 5, 7, 11, 17] if ('z', 'w') == (1, 2), (3, 2) mod 4 and ('z', 'w') == (1, 0), (2, 0) mod 3
   [2, 3]               if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3
   []                   if ('z', 'w') is 1 of 4 possibilities mod 8 and ('z', 'w') == (1, 0), (2, 0) mod 3
